provider "aws" {
  region = "eu-central-1"
}


resource "aws_instance" "my_server1" {
  ami = "ami-0f3a43fbf2d3899f7"
  instance_type = "t2.micro"
  vpc_security_group_ids = [aws_security_group.my_server.id]
  availability_zone = "eu-central-1a"
  user_data = file ("Script1.sh")
  tags = {
    Name = "Server - 1"
  }
}

resource "aws_instance" "my_server2" {
  ami = "ami-0f3a43fbf2d3899f7"
  instance_type = "t2.micro"
  vpc_security_group_ids = [aws_security_group.my_server.id]
  availability_zone = "eu-central-1b"
  user_data = file ("Script2.sh")
  tags = {
    Name = "Server - 2"
  }
}

resource "aws_instance" "my_server3" {
  ami = "ami-0f3a43fbf2d3899f7"
  instance_type = "t2.micro"
  vpc_security_group_ids = [aws_security_group.my_server.id]
  availability_zone = "eu-central-1c"
  user_data = file ("Script3.sh")
  tags = {
    Name = "Server - 3"
  }
}

resource "aws_security_group" "my_server" {
    name = "WebServer Security Group"
    ingress { 
      from_port = 80
      to_port = 80
      protocol = "tcp"
      cidr_blocks = ["0.0.0.0/0"] #all
    }

    egress {
      from_port = 0
      to_port = 0
      protocol = "-1" #any
      cidr_blocks = ["0.0.0.0/0"]
    }
}

resource "aws_elb" "myELB" {
  name               = "myelb"
  availability_zones = ["eu-central-1a", "eu-central-1b", "eu-central-1c"]


listener {
    instance_port     = 80
    instance_protocol = "http"
    lb_port           = 80
    lb_protocol       = "http"
  }

health_check {
    healthy_threshold   = 2 #если 2 пинга подряд прошло, то все ок
    unhealthy_threshold = 2 #если 2 пинга подряд не прошло, то все плохо
    timeout             = 3
    target              = "HTTP:80/"
    interval            = 5 #через каждые 5 секунд посылать проверку
  }


instances               = ["${aws_instance.my_server1.id}", "${aws_instance.my_server2.id}", "${aws_instance.my_server3.id}"]
    cross_zone_load_balancing   = true
    connection_draining         = true
    connection_draining_timeout = 300 #поддерживать соединение
}

